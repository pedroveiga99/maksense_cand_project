@page "/scheduleExams"

@inject IJSRuntime jsRuntime
@inject ApiService api



<h3>Marcação de Exames</h3>
<br />
<br />

<EditForm Model="tempProcess" OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
    <ObjectGraphDataAnnotationsValidator />
    <!-- <ValidationSummary /> -->

    <table id="ScheduleExamsTable">
        
        <tbody>
            <!-- Personal Information -->
            <tr>
                <td style="width:35%">
                    <div class="form-group">
                        <label for="numUtente">Número de Utente:</label><br />
                        <InputNumber @bind-Value=tempProcess.Person.NumUtente></InputNumber>
                        <ValidationMessage For="() => tempProcess.Person.NumUtente" />
                    </div>
                </td>
                <td style="width:35%">
                    <div class="form-group">
                        <label for="nome">Nome</label><br />
                        <InputText @bind-Value=tempProcess.Person.Name></InputText>
                        <ValidationMessage For="() => tempProcess.Person.Name" />
                    </div>
                </td>
                <td>
                    <div class="form-group">
                        <label for="birthDate">Data de Nascimento</label><br />
                        <InputDate @bind-Value=tempProcess.Person.BirthDate></InputDate>
                        <ValidationMessage For="() => tempProcess.Person.BirthDate" />
                    </div>
                </td>
            </tr>
            
            <!-- Exams -->
            <tr>
                <td colspan="3">
                    <TestCheckBoxList Data="@AvailableExams" SelectedValues="@SelectedExams" />
                    <ValidationMessage For="() => tempProcess.Exams" />
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan ="3">
                    <input type="submit" class="btn btn-primary" value="Marcar Exames" />
                </td>
            </tr>
        </tfoot>
    </table>
</EditForm>


@code {
    Process tempProcess = new Process
        {
            Person = new Person(),
            Exams = new List<Exam>(),
            ProcessDate = DateTime.Now,
        };

    public List<Exam> AvailableExams = new List<Exam>();
    public List<Exam> SelectedExams = new List<Exam>();

    protected override async Task OnInitializedAsync()
    {
        AvailableExams = await api.GetAllAvailableExams();
    }


    public void FormSubmitted()
    {
        jsRuntime.InvokeVoidAsync("console.log", tempProcess);
    }

    public async void ValidFormSubmitted()
    {
        jsRuntime.InvokeVoidAsync("console.log", "Valid");
        jsRuntime.InvokeVoidAsync("console.log", tempProcess);

        Process newProcess = await api.PostProcessAsync(tempProcess);
        jsRuntime.InvokeVoidAsync("console.log", "Added");
        jsRuntime.InvokeVoidAsync("console.log", newProcess);

    }

    public void InvalidFormSubmitted()
    {
        tempProcess.Exams = SelectedExams;


        jsRuntime.InvokeVoidAsync("console.log", "Invalid");
        jsRuntime.InvokeVoidAsync("console.log", SelectedExams);
        jsRuntime.InvokeVoidAsync("console.log", tempProcess);

    }
}
