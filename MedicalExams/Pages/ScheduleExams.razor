@page "/scheduleExams"

@inject IJSRuntime jsRuntime
@inject ApiService api
@inject NavigationManager NavManager



<h3>Marcação de Exames</h3>
<br />
<br />

<EditForm Model="@tempProcess" OnValidSubmit="ValidFormSubmitted" OnInvalidSubmit="InvalidFormSubmitted">
    <ObjectGraphDataAnnotationsValidator />

    <table id="ScheduleExamsTable">
        <tbody>
            <!-- Personal Information -->
            <tr>
                <td style="width:35%">
                    <div class="form-group">
                        <MudNumericField 
                            Label="Número de Utente" 
                            @bind-Value=tempProcess.Person.NumUtente 
                            For="@(() => tempProcess.Person.NumUtente)" 
                            OnlyValidateIfDirty="true">
                        </MudNumericField>
                    </div>
                </td>
                <td style="width:35%">
                    <div class="form-group">
                        <MudTextField 
                            Label="Nome" 
                            @bind-Value=tempProcess.Person.Name 
                            For="@(() => tempProcess.Person.Name)" 
                            OnlyValidateIfDirty="true">
                        </MudTextField>
                    </div>
                </td>
                <td>
                    <div class="form-group">
                        
                        <MudDatePicker 
                            Label="Data de Nascimento" 
                            @bind-Date="selectedDate">
                        </MudDatePicker>
                    </div>
                </td>
            </tr>
            <!-- Exams -->
            <tr>
                <td colspan="3">
                    @foreach (Exam e in AvailableExams)
                    {
                        <MudCheckBox Label="@e.Name" CheckedChanged="((bool state) => checkExam(state, e))"></MudCheckBox>
                    }

                    @if (!examsValid)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">Selecione pelo menos um exame</MudAlert>
                    }
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan ="3">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Marcar exames</MudButton>
                </td>
            </tr>
        </tfoot>
    </table>
</EditForm>

<!-- Popup with more details of confirmation -->
<DetailsPopup @ref="confirmationPopup"></DetailsPopup>


@code {
    Process tempProcess = new Process
        {
            Person = new Person(),
            Exams = new List<Exam>()
        };

    public List<Exam> AvailableExams = new List<Exam>();
    public DetailsPopup? confirmationPopup;
    public DateTime? selectedDate = DateTime.Now;

    public bool examsValid = true;

    protected override async Task OnInitializedAsync()
    {
        AvailableExams = await api.GetAllAvailableExams();
    }

    public void checkExam(bool state, Exam e)
    {
        if (state)
        {
            tempProcess.Exams.Add(e);
        }
        else
        {
            tempProcess.Exams.Remove(e);
        }

        if (tempProcess.Exams.Count <= 0)
        {
            examsValid = false;
        }
        else
        {
            examsValid = true;
        }

        StateHasChanged();
    }

    public async void ValidFormSubmitted()
    {
        tempProcess.ProcessDate = DateTime.Now;

        jsRuntime.InvokeVoidAsync("console.log", "Valid");
        jsRuntime.InvokeVoidAsync("console.log", tempProcess);

        Process newProcess = await api.PostProcessAsync(tempProcess);

        confirmationPopup.Title = $"Adicionado o Processo {newProcess.Id.ToString()} ({newProcess.ProcessDate.ToShortDateString()})";
        confirmationPopup.process = newProcess;
        confirmationPopup.Show();

        // Reset form information
        tempProcess = new Process
        {
            Person = new Person(),
            Exams = new List<Exam>()
        };
        StateHasChanged();



    }

    public void InvalidFormSubmitted()
    {
        if (tempProcess.Exams.Count <= 0)
        {
            examsValid = false;
        }
        else
        {
            examsValid = true;
        }


        jsRuntime.InvokeVoidAsync("console.log", "Invalid");
        jsRuntime.InvokeVoidAsync("console.log", tempProcess);
        StateHasChanged();
    }
}
